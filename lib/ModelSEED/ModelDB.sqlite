-- 
-- Created by SQL::Translator::Producer::SQLite
-- Created on Wed Jan  4 15:28:14 2012
-- 

BEGIN TRANSACTION;

--
-- Table: compartments
--
CREATE TABLE compartments (
  uuid CHAR(36) NOT NULL,
  modDate DATETIME,
  locked TINYINT(1),
  id VARCHAR(2) NOT NULL,
  name VARCHAR(255) DEFAULT '',
  PRIMARY KEY (uuid)
);

CREATE INDEX compartments_id ON compartments (id);

--
-- Table: reactions
--
CREATE TABLE reactions (
  uuid CHAR(36) NOT NULL,
  modDate DATETIME,
  locked TINYINT(1),
  id VARCHAR(32) NOT NULL,
  name VARCHAR(255) DEFAULT '',
  abbreviation VARCHAR(255) DEFAULT '',
  cksum VARCHAR(255) DEFAULT '',
  equation TEXT DEFAULT '',
  deltaG DOUBLE,
  deltaGErr DOUBLE,
  reversibility CHAR(1) DEFAULT '=',
  thermoReversibility CHAR(1),
  defaultProtons DOUBLE,
  defaultCompartment CHAR(36),
  defaultTransproton DOUBLE,
  PRIMARY KEY (uuid),
  FOREIGN KEY(defaultCompartment) REFERENCES compartments(uuid)
);

CREATE INDEX reactions_id ON reactions (id);

CREATE INDEX reactions_cksum ON reactions (cksum);

CREATE INDEX reactions_defaultCompartment_fk ON reactions (defaultCompartment);

--
-- Table: biochemistries
--
CREATE TABLE biochemistries (
  uuid CHAR(36) NOT NULL,
  modDate DATETIME,
  locked TINYINT(1),
  public TINYINT(1),
  name VARCHAR(255),
  PRIMARY KEY (uuid)
);

CREATE INDEX biochemistries_public ON biochemistries (public);

--
-- Table: compounds
--
CREATE TABLE compounds (
  uuid CHAR(36) NOT NULL,
  modDate DATETIME,
  locked TINYINT(1),
  id VARCHAR(32),
  name VARCHAR(255),
  abbreviation VARCHAR(255),
  cksum VARCHAR(255),
  unchargedFormula VARCHAR(255),
  formula VARCHAR(255),
  mass DOUBLE,
  defaultCharge DOUBLE,
  deltaG DOUBLE,
  deltaGErr DOUBLE,
  PRIMARY KEY (uuid)
);

CREATE INDEX compounds_cksum ON compounds (cksum);

CREATE INDEX compounds_id ON compounds (id);

CREATE INDEX compounds_name ON compounds (name);

CREATE INDEX compounds_formula ON compounds (formula);

--
-- Table: biochemistry_compounds
--
CREATE TABLE biochemistry_compounds (
  biochemistry CHAR(36) NOT NULL,
  compound CHAR(36) NOT NULL,
  PRIMARY KEY (biochemistry, compound),
  FOREIGN KEY(biochemistry) REFERENCES biochemistries(uuid),
  FOREIGN KEY(compound) REFERENCES compounds(uuid)
);

CREATE INDEX biochemistry_compounds_compound_fk ON biochemistry_compounds (compound);

CREATE INDEX biochemistry_compounds_biochemistry_fk ON biochemistry_compounds (biochemistry);

--
-- Table: complexes
--
CREATE TABLE complexes (
  uuid CHAR(36) NOT NULL,
  modDate DATETIME,
  locked TINYINT(1),
  id VARCHAR(32),
  name VARCHAR(255),
  searchname VARCHAR(255),
  PRIMARY KEY (uuid)
);

CREATE INDEX complexes_searchname ON complexes (searchname);

CREATE INDEX complexes_id ON complexes (id);

CREATE INDEX complexes_name ON complexes (name);

--
-- Table: media
--
CREATE TABLE media (
  uuid CHAR(36) NOT NULL,
  modDate DATETIME,
  locked TINYINT(1),
  id VARCHAR(32),
  name VARCHAR(255),
  type CHAR(1),
  PRIMARY KEY (uuid)
);

CREATE INDEX media_id ON media (id);

CREATE INDEX media_name ON media (name);

--
-- Table: genomes
--
CREATE TABLE genomes (
  uuid CHAR(36) NOT NULL,
  modDate DATETIME,
  locked TINYINT(1),
  public TINYINT(1),
  id VARCHAR(32),
  name VARCHAR(32),
  source VARCHAR(32),
  type VARCHAR(32),
  taxonomy VARCHAR(255),
  cksum VARCHAR(255),
  size int(11),
  genes int(11),
  gc DOUBLE,
  gramPositive CHAR(1),
  aerobic CHAR(1),
  PRIMARY KEY (uuid)
);

CREATE INDEX genomes_id ON genomes (id);

CREATE INDEX genomes_source ON genomes (source);

CREATE INDEX genomes_cksum ON genomes (cksum);

--
-- Table: features
--
CREATE TABLE features (
  uuid CHAR(36) NOT NULL,
  modDate DATETIME,
  locked TINYINT(1),
  id VARCHAR(32),
  cksum VARCHAR(255),
  genome CHAR(36) NOT NULL,
  start int(11),
  stop int(11),
  PRIMARY KEY (uuid),
  FOREIGN KEY(genome) REFERENCES genomes(uuid)
);

CREATE INDEX features_id ON features (id);

CREATE INDEX features_cksum ON features (cksum);

CREATE INDEX features_genome_fk ON features (genome);

--
-- Table: roles
--
CREATE TABLE roles (
  uuid CHAR(36) NOT NULL,
  modDate DATETIME,
  locked TINYINT(1),
  id VARCHAR(32),
  name VARCHAR(255),
  searchname VARCHAR(255),
  exemplar CHAR(36),
  PRIMARY KEY (uuid),
  FOREIGN KEY(exemplar) REFERENCES features(uuid)
);

CREATE INDEX roles_id ON roles (id);

CREATE INDEX roles_name ON roles (name);

CREATE INDEX roles_searchname ON roles (searchname);

CREATE INDEX roles_exemplar ON roles (exemplar);

CREATE INDEX roles_feature_fk ON roles (exemplar);

--
-- Table: complex_roles
--
CREATE TABLE complex_roles (
  complex CHAR(36) NOT NULL,
  role CHAR(36) NOT NULL,
  optional TINYINT(1),
  type CHAR(1),
  PRIMARY KEY (complex, role),
  FOREIGN KEY(complex) REFERENCES complexes(uuid),
  FOREIGN KEY(role) REFERENCES roles(uuid)
);

CREATE INDEX role_fk ON complex_roles (role);

CREATE INDEX complex_fk ON complex_roles (complex);

--
-- Table: biochemistry_reactions
--
CREATE TABLE biochemistry_reactions (
  biochemistry CHAR(36) NOT NULL,
  reaction CHAR(36) NOT NULL,
  PRIMARY KEY (biochemistry, reaction),
  FOREIGN KEY(biochemistry) REFERENCES biochemistries(uuid),
  FOREIGN KEY(reaction) REFERENCES reactions(uuid)
);

CREATE INDEX biochemistry_reactions_reaction_fk ON biochemistry_reactions (reaction);

CREATE INDEX biochemistry_reactions_biochemistry_fk ON biochemistry_reactions (biochemistry);

--
-- Table: reaction_rules
--
CREATE TABLE reaction_rules (
  reaction CHAR(36) NOT NULL,
  complex CHAR(36) NOT NULL,
  compartment CHAR(36) NOT NULL,
  direction CHAR(1),
  transprotonNature CHAR(255),
  PRIMARY KEY (reaction, complex),
  FOREIGN KEY(reaction) REFERENCES reactions(uuid),
  FOREIGN KEY(complex) REFERENCES complexes(uuid),
  FOREIGN KEY(compartment) REFERENCES compartments(uuid)
);

CREATE INDEX reaction_rules_complex_fk ON reaction_rules (complex);

CREATE INDEX reaction_rules_reaction_fk ON reaction_rules (reaction);

CREATE INDEX reaction_rules_compartment_fk ON reaction_rules (compartment);

--
-- Table: reaction_rule_transports
--
CREATE TABLE reaction_rule_transports (
  reaction CHAR(36) NOT NULL,
  complex CHAR(36) NOT NULL,
  compartmentIndex int(11) NOT NULL,
  compartment CHAR(36) NOT NULL,
  PRIMARY KEY (reaction, complex, compartmentIndex),
  FOREIGN KEY(reaction) REFERENCES reactions(uuid),
  FOREIGN KEY(complex) REFERENCES complexes(uuid),
  FOREIGN KEY(compartment) REFERENCES compartments(uuid)
);

CREATE INDEX reaction_rule_transports_complex_fk ON reaction_rule_transports (complex);

CREATE INDEX reaction_rule_transports_reaction_fk ON reaction_rule_transports (reaction);

CREATE INDEX reaction_rule_transports_compartment_fk ON reaction_rule_transports (compartment);

--
-- Table: compound_aliases
--
CREATE TABLE compound_aliases (
  compound CHAR(36) NOT NULL,
  alias VARCHAR(255) NOT NULL,
  modDate VARCHAR(45),
  type VARCHAR(32) NOT NULL,
  PRIMARY KEY (type, alias),
  FOREIGN KEY(compound) REFERENCES compounds(uuid)
);

CREATE INDEX compound_aliases_type ON compound_aliases (type);

CREATE INDEX compound_aliases_compound_fk ON compound_aliases (compound);

--
-- Table: compound_structures
--
CREATE TABLE compound_structures (
  compound CHAR(36) NOT NULL,
  structure TEXT NOT NULL,
  cksum VARCHAR(255) NOT NULL,
  modDate VARCHAR(45),
  type VARCHAR(32) NOT NULL,
  PRIMARY KEY (type, cksum),
  FOREIGN KEY(compound) REFERENCES compounds(uuid)
);

CREATE INDEX compound_structures_type ON compound_structures (type);

CREATE INDEX compound_structures_compound_fk ON compound_structures (compound);

--
-- Table: reaction_aliases
--
CREATE TABLE reaction_aliases (
  reaction CHAR(36) NOT NULL,
  alias VARCHAR(255) NOT NULL,
  modDate VARCHAR(45),
  type VARCHAR(32) NOT NULL,
  PRIMARY KEY (type, alias),
  FOREIGN KEY(reaction) REFERENCES reactions(uuid)
);

CREATE INDEX compound_alias_type ON reaction_aliases (type);

CREATE INDEX reaction_fk ON reaction_aliases (reaction);

--
-- Table: mappings
--
CREATE TABLE mappings (
  uuid CHAR(36) NOT NULL,
  modDate DATETIME,
  locked TINYINT(1),
  public TINYINT(1),
  name VARCHAR(255),
  biochemistry CHAR(36) NOT NULL,
  PRIMARY KEY (uuid),
  FOREIGN KEY(biochemistry) REFERENCES biochemistries(uuid)
);

CREATE INDEX mappings_public ON mappings (public);

CREATE INDEX mappings_biochemistry_fk ON mappings (biochemistry);

--
-- Table: mapping_complexes
--
CREATE TABLE mapping_complexes (
  mapping CHAR(36) NOT NULL,
  complex CHAR(36) NOT NULL,
  PRIMARY KEY (mapping, complex),
  FOREIGN KEY(mapping) REFERENCES mappings(uuid),
  FOREIGN KEY(complex) REFERENCES complexes(uuid)
);

CREATE INDEX mapping_complexes_complex_fk ON mapping_complexes (complex);

CREATE INDEX mapping_complexes_mapping_fk ON mapping_complexes (mapping);

--
-- Table: reagents
--
CREATE TABLE reagents (
  reaction CHAR(36) NOT NULL,
  compound CHAR(36) NOT NULL,
  compartmentIndex int(11) NOT NULL,
  coefficient DOUBLE,
  cofactor TINYINT(1),
  PRIMARY KEY (reaction, compound, compartmentIndex),
  FOREIGN KEY(reaction) REFERENCES reactions(uuid),
  FOREIGN KEY(compound) REFERENCES compounds(uuid)
);

CREATE INDEX reagents_compound_fk ON reagents (compound);

CREATE INDEX reagents_reaction_fk ON reagents (reaction);

--
-- Table: reagent_transports
--
CREATE TABLE reagent_transports (
  reaction CHAR(36) NOT NULL,
  defaultCompartment CHAR(36) NOT NULL,
  compartmentIndex int(11) NOT NULL,
  PRIMARY KEY (reaction, compartmentIndex),
  FOREIGN KEY(reaction) REFERENCES reactions(uuid),
  FOREIGN KEY(defaultCompartment) REFERENCES compartments(uuid)
);

CREATE INDEX reagent_transports_reaction_fk ON reagent_transports (reaction);

CREATE INDEX reagent_transports_defaultCompartment_fk ON reagent_transports (defaultCompartment);

--
-- Table: reactionsets
--
CREATE TABLE reactionsets (
  uuid CHAR(36) NOT NULL,
  modDate DATETIME,
  locked TINYINT(1),
  id VARCHAR(32),
  name VARCHAR(255),
  searchname VARCHAR(255),
  class VARCHAR(255),
  type VARCHAR(32),
  PRIMARY KEY (uuid)
);

CREATE INDEX reactionsets_id ON reactionsets (id);

CREATE INDEX reactionsets_name ON reactionsets (name);

CREATE INDEX reactionsets_searchname ON reactionsets (searchname);

--
-- Table: annotations
--
CREATE TABLE annotations (
  uuid CHAR(36) NOT NULL,
  modDate DATETIME,
  locked TINYINT(1),
  name VARCHAR(255),
  genome CHAR(36) NOT NULL,
  PRIMARY KEY (uuid),
  FOREIGN KEY(genome) REFERENCES genomes(uuid)
);

CREATE INDEX annotations_name ON annotations (name);

CREATE INDEX annotations_genome_fk ON annotations (genome);

--
-- Table: models
--
CREATE TABLE models (
  uuid CHAR(36) NOT NULL,
  modDate DATETIME,
  locked TINYINT(1),
  public TINYINT(1),
  id VARCHAR(255),
  name VARCHAR(32),
  version int(11),
  type VARCHAR(32),
  status VARCHAR(32),
  reactions int(11),
  compounds int(11),
  annotations int(11),
  growth DOUBLE,
  current TINYINT(1),
  mapping CHAR(36) NOT NULL,
  biochemistry CHAR(36) NOT NULL,
  annotation CHAR(36) NOT NULL,
  PRIMARY KEY (uuid),
  FOREIGN KEY(mapping) REFERENCES mappings(uuid),
  FOREIGN KEY(biochemistry) REFERENCES biochemistries(uuid),
  FOREIGN KEY(annotation) REFERENCES annotations(uuid)
);

CREATE INDEX models_mapping_fk ON models (mapping);

CREATE INDEX models_biochemistry_fk ON models (biochemistry);

CREATE INDEX models_annotation_fk ON models (annotation);

--
-- Table: model_compartments
--
CREATE TABLE model_compartments (
  uuid CHAR(36) NOT NULL,
  modDate DATETIME NOT NULL,
  locked TINYINT(1),
  model CHAR(36) NOT NULL,
  compartment CHAR(36) NOT NULL,
  compartmentIndex int(11) NOT NULL,
  label VARCHAR(255),
  pH DOUBLE,
  potential DOUBLE,
  PRIMARY KEY (uuid),
  FOREIGN KEY(model) REFERENCES models(uuid),
  FOREIGN KEY(compartment) REFERENCES compartments(uuid)
);

CREATE INDEX model_compartments_compartment_fk ON model_compartments (compartment);

CREATE INDEX model_compartments_model_fk ON model_compartments (model);

CREATE UNIQUE INDEX model_compartments_idx ON model_compartments (model, compartment, compartmentIndex);

--
-- Table: model_reactions
--
CREATE TABLE model_reactions (
  model CHAR(36) NOT NULL,
  reaction CHAR(36) NOT NULL,
  direction CHAR(1),
  transproton DOUBLE,
  protons DOUBLE,
  modelCompartment CHAR(36) NOT NULL,
  PRIMARY KEY (model, reaction),
  FOREIGN KEY(model) REFERENCES models(uuid),
  FOREIGN KEY(reaction) REFERENCES reactions(uuid),
  FOREIGN KEY(modelCompartment) REFERENCES model_compartments(uuid)
);

CREATE INDEX model_reactions_reaction_fk ON model_reactions (reaction);

CREATE INDEX model_reactions_model_fk ON model_reactions (model);

CREATE INDEX model_reactions_modelCompartment_fk ON model_reactions (modelCompartment);

--
-- Table: model_reaction_transports
--
CREATE TABLE model_reaction_transports (
  model CHAR(36) NOT NULL,
  reaction CHAR(36) NOT NULL,
  transportIndex int(11) NOT NULL,
  modelCompartment CHAR(36) NOT NULL,
  PRIMARY KEY (model, reaction, transportIndex),
  FOREIGN KEY(model) REFERENCES models(uuid),
  FOREIGN KEY(reaction) REFERENCES reactions(uuid),
  FOREIGN KEY(modelCompartment) REFERENCES model_compartments(uuid)
);

CREATE INDEX model_reaction_transports_reaction_fk ON model_reaction_transports (reaction);

CREATE INDEX model_reaction_transports_model_fk ON model_reaction_transports (model);

CREATE INDEX model_reaction_transports_modelCompartment_fk ON model_reaction_transports (modelCompartment);

--
-- Table: modelfbas
--
CREATE TABLE modelfbas (
  uuid CHAR(36) NOT NULL,
  modDate VARCHAR(45),
  locked TINYINT(1),
  model CHAR(36) NOT NULL,
  media CHAR(36) NOT NULL,
  options VARCHAR(255),
  geneko VARCHAR(255),
  reactionko VARCHAR(255),
  PRIMARY KEY (uuid),
  FOREIGN KEY(model) REFERENCES models(uuid),
  FOREIGN KEY(media) REFERENCES media(uuid)
);

CREATE INDEX modelfbas_model_fk ON modelfbas (model);

CREATE INDEX modelfbas_media_fk ON modelfbas (media);

--
-- Table: media_compounds
--
CREATE TABLE media_compounds (
  media CHAR(36) NOT NULL,
  compound CHAR(36) NOT NULL,
  concentration DOUBLE,
  minflux DOUBLE,
  maxflux DOUBLE,
  PRIMARY KEY (media, compound),
  FOREIGN KEY(media) REFERENCES media(uuid),
  FOREIGN KEY(compound) REFERENCES compounds(uuid)
);

CREATE INDEX media_compounds_compound_fk ON media_compounds (compound);

CREATE INDEX media_compounds_media_fk ON media_compounds (media);

--
-- Table: modeless_features
--
CREATE TABLE modeless_features (
  modelfba CHAR(36) NOT NULL,
  feature CHAR(36) NOT NULL,
  modDate DATETIME,
  growthFraction DOUBLE,
  essential TINYINT(1),
  PRIMARY KEY (modelfba, feature),
  FOREIGN KEY(modelfba) REFERENCES modelfbas(uuid),
  FOREIGN KEY(feature) REFERENCES features(uuid)
);

CREATE INDEX modeless_features_feature_fk ON modeless_features (feature);

CREATE INDEX modeless_features_modelfba_fk ON modeless_features (modelfba);

--
-- Table: annotation_features
--
CREATE TABLE annotation_features (
  annotation CHAR(36) NOT NULL,
  feature CHAR(36) NOT NULL,
  role CHAR(36) NOT NULL,
  PRIMARY KEY (annotation, feature, role),
  FOREIGN KEY(annotation) REFERENCES annotations(uuid),
  FOREIGN KEY(feature) REFERENCES features(uuid),
  FOREIGN KEY(role) REFERENCES roles(uuid)
);

CREATE INDEX annotation_features_feature_fk ON annotation_features (feature);

CREATE INDEX annotation_features_annotation_fk ON annotation_features (annotation);

CREATE INDEX annotation_features_role_fk ON annotation_features (role);

--
-- Table: rolesets
--
CREATE TABLE rolesets (
  uuid CHAR(36) NOT NULL,
  modDate DATETIME,
  locked TINYINT(1),
  public TINYINT(1),
  id VARCHAR(32),
  name VARCHAR(255),
  searchname VARCHAR(255),
  class VARCHAR(255),
  subclass VARCHAR(255),
  type VARCHAR(32),
  PRIMARY KEY (uuid)
);

CREATE INDEX rolesets_id ON rolesets (id);

CREATE INDEX rolesets_name ON rolesets (name);

CREATE INDEX rolesets_searchname ON rolesets (searchname);

--
-- Table: roleset_roles
--
CREATE TABLE roleset_roles (
  roleset CHAR(36) NOT NULL,
  role CHAR(36) NOT NULL,
  modDate DATETIME,
  PRIMARY KEY (roleset, role),
  FOREIGN KEY(roleset) REFERENCES rolesets(uuid),
  FOREIGN KEY(role) REFERENCES roles(uuid)
);

CREATE INDEX roleset_roles_role_fk ON roleset_roles (role);

CREATE INDEX roleset_roles_roleset_fk ON roleset_roles (roleset);

--
-- Table: mapping_roles
--
CREATE TABLE mapping_roles (
  mapping CHAR(36) NOT NULL,
  role CHAR(36) NOT NULL,
  PRIMARY KEY (mapping, role),
  FOREIGN KEY(mapping) REFERENCES mappings(uuid),
  FOREIGN KEY(role) REFERENCES roles(uuid)
);

CREATE INDEX mapping_roles_role_fk ON mapping_roles (role);

CREATE INDEX mapping_roles_mapping_fk ON mapping_roles (mapping);

--
-- Table: mapping_compartments
--
CREATE TABLE mapping_compartments (
  mapping CHAR(36) NOT NULL,
  compartment CHAR(36) NOT NULL,
  PRIMARY KEY (mapping, compartment),
  FOREIGN KEY(mapping) REFERENCES mappings(uuid),
  FOREIGN KEY(compartment) REFERENCES compartments(uuid)
);

CREATE INDEX mapping_compartments_compartment_fk ON mapping_compartments (compartment);

CREATE INDEX mapping_compartments_mapping_fk ON mapping_compartments (mapping);

--
-- Table: compound_pks
--
CREATE TABLE compound_pks (
  compound CHAR(36) NOT NULL,
  modDate VARCHAR(45),
  atom int(11),
  pk DOUBLE,
  type CHAR(1),
  PRIMARY KEY (compound),
  FOREIGN KEY(compound) REFERENCES compounds(uuid)
);

CREATE INDEX compound_pks_compound_fk ON compound_pks (compound);

--
-- Table: reactionset_reactions
--
CREATE TABLE reactionset_reactions (
  reactionset CHAR(36) NOT NULL,
  reaction CHAR(36) NOT NULL,
  PRIMARY KEY (reactionset, reaction),
  FOREIGN KEY(reactionset) REFERENCES reactionsets(uuid),
  FOREIGN KEY(reaction) REFERENCES reactions(uuid)
);

CREATE INDEX reactionset_reactions_reaction_fk ON reactionset_reactions (reaction);

CREATE INDEX reactionset_reactions_reactionset_fk ON reactionset_reactions (reactionset);

--
-- Table: compoundsets
--
CREATE TABLE compoundsets (
  uuid CHAR(36) NOT NULL,
  modDate DATETIME,
  locked TINYINT(1),
  id VARCHAR(32),
  name VARCHAR(255),
  searchname VARCHAR(255),
  class VARCHAR(255),
  type VARCHAR(32),
  PRIMARY KEY (uuid)
);

CREATE INDEX compoundsets_id ON compoundsets (id);

CREATE INDEX compoundsets_name ON compoundsets (name);

CREATE INDEX compoundsets_searchname ON compoundsets (searchname);

--
-- Table: compoundset_compounds
--
CREATE TABLE compoundset_compounds (
  compoundset CHAR(36) NOT NULL,
  compound CHAR(36) NOT NULL,
  PRIMARY KEY (compoundset, compound),
  FOREIGN KEY(compoundset) REFERENCES compoundsets(uuid),
  FOREIGN KEY(compound) REFERENCES compounds(uuid)
);

CREATE INDEX compoundset_compounds_compound_fk ON compoundset_compounds (compound);

CREATE INDEX compoundset_compounds_compoundset_fk ON compoundset_compounds (compoundset);

--
-- Table: modelfba_reactions
--
CREATE TABLE modelfba_reactions (
  modelfba CHAR(36) NOT NULL,
  reaction CHAR(36) NOT NULL,
  min DOUBLE,
  max DOUBLE,
  class CHAR(1),
  PRIMARY KEY (modelfba, reaction),
  FOREIGN KEY(modelfba) REFERENCES modelfbas(uuid),
  FOREIGN KEY(reaction) REFERENCES reactions(uuid)
);

CREATE INDEX modelfba_reactions_reaction_fk ON modelfba_reactions (reaction);

CREATE INDEX modelfba_reactions_modelfba_fk ON modelfba_reactions (modelfba);

--
-- Table: modelfba_compounds
--
CREATE TABLE modelfba_compounds (
  modelfba CHAR(36) NOT NULL,
  compound CHAR(36) NOT NULL,
  min DOUBLE,
  max DOUBLE,
  class CHAR(1),
  PRIMARY KEY (modelfba, compound),
  FOREIGN KEY(modelfba) REFERENCES modelfbas(uuid),
  FOREIGN KEY(compound) REFERENCES compounds(uuid)
);

CREATE INDEX modelfba_compounds_compound_fk ON modelfba_compounds (compound);

CREATE INDEX modelfba_compounds_modelfba_fk ON modelfba_compounds (modelfba);

--
-- Table: biochemistry_media
--
CREATE TABLE biochemistry_media (
  biochemistry CHAR(36) NOT NULL,
  media CHAR(36) NOT NULL,
  PRIMARY KEY (biochemistry, media),
  FOREIGN KEY(biochemistry) REFERENCES biochemistries(uuid),
  FOREIGN KEY(media) REFERENCES media(uuid)
);

CREATE INDEX biochemistry_media_media_fk ON biochemistry_media (media);

CREATE INDEX biochemistry_media_biochemistry_fk ON biochemistry_media (biochemistry);

--
-- Table: biochemistry_reactionsets
--
CREATE TABLE biochemistry_reactionsets (
  biochemistry CHAR(36) NOT NULL,
  reactionset CHAR(36) NOT NULL,
  PRIMARY KEY (biochemistry, reactionset),
  FOREIGN KEY(biochemistry) REFERENCES biochemistries(uuid),
  FOREIGN KEY(reactionset) REFERENCES reactionsets(uuid)
);

CREATE INDEX biochemistry_reactionsets_reactionset_fk ON biochemistry_reactionsets (reactionset);

CREATE INDEX biochemistry_reactionsets_biochemistry_fk ON biochemistry_reactionsets (biochemistry);

--
-- Table: biochemistry_compoundsets
--
CREATE TABLE biochemistry_compoundsets (
  biochemistry CHAR(36) NOT NULL,
  compoundset CHAR(36) NOT NULL,
  PRIMARY KEY (biochemistry, compoundset),
  FOREIGN KEY(biochemistry) REFERENCES biochemistries(uuid),
  FOREIGN KEY(compoundset) REFERENCES compoundsets(uuid)
);

CREATE INDEX biochemistry_compoundsets_compoundset_fk ON biochemistry_compoundsets (compoundset);

CREATE INDEX biochemistry_compoundsets_biochemistry_fk ON biochemistry_compoundsets (biochemistry);

--
-- Table: biochemistry_parents
--
CREATE TABLE biochemistry_parents (
  child CHAR(36) NOT NULL,
  parent CHAR(36) NOT NULL,
  PRIMARY KEY (child, parent),
  FOREIGN KEY(parent) REFERENCES biochemistries(uuid),
  FOREIGN KEY(child) REFERENCES biochemistries(uuid)
);

CREATE INDEX biochemistry_parents_parent_fk ON biochemistry_parents (parent);

CREATE INDEX biochemistry_parents_child_fk ON biochemistry_parents (child);

--
-- Table: mapping_parents
--
CREATE TABLE mapping_parents (
  child CHAR(36) NOT NULL,
  parent CHAR(36) NOT NULL,
  PRIMARY KEY (child, parent),
  FOREIGN KEY(parent) REFERENCES mappings(uuid),
  FOREIGN KEY(child) REFERENCES mappings(uuid)
);

CREATE INDEX mapping_parents_parent_fk ON mapping_parents (parent);

CREATE INDEX mapping_parents_child_fk ON mapping_parents (child);

--
-- Table: model_parents
--
CREATE TABLE model_parents (
  child CHAR(36) NOT NULL,
  parent CHAR(36) NOT NULL,
  PRIMARY KEY (child, parent),
  FOREIGN KEY(parent) REFERENCES models(uuid),
  FOREIGN KEY(child) REFERENCES models(uuid)
);

CREATE INDEX model_parents_parent_fk ON model_parents (parent);

CREATE INDEX model_parents_child_fk ON model_parents (child);

--
-- Table: annotation_parents
--
CREATE TABLE annotation_parents (
  child CHAR(36) NOT NULL,
  parent CHAR(36) NOT NULL,
  PRIMARY KEY (child, parent),
  FOREIGN KEY(parent) REFERENCES annotations(uuid),
  FOREIGN KEY(child) REFERENCES annotations(uuid)
);

CREATE INDEX annotation_parents_parent_fk ON annotation_parents (parent);

CREATE INDEX annotation_parents_child_fk ON annotation_parents (child);

--
-- Table: roleset_parents
--
CREATE TABLE roleset_parents (
  child CHAR(36) NOT NULL,
  parent CHAR(36) NOT NULL,
  PRIMARY KEY (child, parent),
  FOREIGN KEY(parent) REFERENCES rolesets(uuid),
  FOREIGN KEY(child) REFERENCES rolesets(uuid)
);

CREATE INDEX roleset_parents_parent_fk ON roleset_parents (parent);

CREATE INDEX roleset_parents_child_fk ON roleset_parents (child);

--
-- Table: permissions
--
CREATE TABLE permissions (
  object CHAR(36) NOT NULL,
  user VARCHAR(255) NOT NULL,
  read TINYINT(1),
  write TINYINT(1),
  admin TINYINT(1),
  PRIMARY KEY (object, user)
);

--
-- Table: biomasses
--
CREATE TABLE biomasses (
  uuid CHAR(36) NOT NULL,
  modDate DATETIME,
  locked TINYINT(1),
  id VARCHAR(32),
  name VARCHAR(255),
  PRIMARY KEY (uuid)
);

CREATE INDEX biomass_id ON biomasses (id);

--
-- Table: model_biomass
--
CREATE TABLE model_biomass (
  model CHAR(36) NOT NULL,
  biomass CHAR(36) NOT NULL,
  PRIMARY KEY (model, biomass),
  FOREIGN KEY(biomass) REFERENCES biomasses(uuid),
  FOREIGN KEY(model) REFERENCES models(uuid)
);

CREATE INDEX model_biomass_biomass_fk ON model_biomass (biomass);

CREATE INDEX model_biomass_model_fk ON model_biomass (model);

--
-- Table: biomass_compounds
--
CREATE TABLE biomass_compounds (
  biomass CHAR(36) NOT NULL,
  compound CHAR(36) NOT NULL,
  compartment CHAR(36) NOT NULL,
  coefficient DOUBLE,
  PRIMARY KEY (biomass, compound),
  FOREIGN KEY(biomass) REFERENCES biomasses(uuid),
  FOREIGN KEY(compound) REFERENCES compounds(uuid),
  FOREIGN KEY(compartment) REFERENCES model_compartments(uuid)
);

CREATE INDEX biomass_compounds_biomass_fk ON biomass_compounds (biomass);

CREATE INDEX biomass_compounds_compound_fk ON biomass_compounds (compound);

CREATE INDEX biomass_compounds_compartment_fk ON biomass_compounds (compartment);

--
-- Table: biochemistry_aliases
--
CREATE TABLE biochemistry_aliases (
  biochemistry CHAR(36) NOT NULL,
  username CHAR(255) NOT NULL,
  id CHAR(255) NOT NULL,
  PRIMARY KEY (username, id),
  FOREIGN KEY(biochemistry) REFERENCES biochemistries(uuid)
);

CREATE INDEX biochemistry_aliases_biochemistry_fk ON biochemistry_aliases (biochemistry);

--
-- Table: model_aliases
--
CREATE TABLE model_aliases (
  model CHAR(36) NOT NULL,
  username CHAR(255) NOT NULL,
  id CHAR(255) NOT NULL,
  PRIMARY KEY (username, id),
  FOREIGN KEY(model) REFERENCES models(uuid)
);

CREATE INDEX model_aliases_model_fk ON model_aliases (model);

--
-- Table: mapping_aliases
--
CREATE TABLE mapping_aliases (
  mapping CHAR(36) NOT NULL,
  username CHAR(255) NOT NULL,
  id CHAR(255) NOT NULL,
  PRIMARY KEY (username, id),
  FOREIGN KEY(mapping) REFERENCES mappings(uuid)
);

CREATE INDEX mapping_aliases_mapping_fk ON mapping_aliases (mapping);

COMMIT;
