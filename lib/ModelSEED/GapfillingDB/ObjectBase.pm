use strict;
use warnings;
no warnings qw(redefine);

1;

# this class is AUTOGENERATED and will be AUTOMATICALLY REGENERATED
# all work done in this module will be LOST


package ModelSEED::GapfillingDB::GAPREP;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		gapid => [ DB_SCALAR, undef, 1, undef ],
		repid => [ DB_SCALAR, undef, 1, undef ],
		nummodel => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "gapid" ],
			[ "repid" ],
		];
}

1;

package ModelSEED::GapfillingDB::REPMDL;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		numgap => [ DB_SCALAR, undef, 1, undef ],
		repid => [ DB_SCALAR, undef, 1, undef ],
		normnumgap => [ DB_SCALAR, undef, 1, undef ],
		model => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "model" ],
			[ "repid" ],
		];
}

1;

package ModelSEED::GapfillingDB::RXN;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		avegap => [ DB_SCALAR, undef, 1, undef ],
		minrepair => [ DB_SCALAR, undef, 1, undef ],
		averepair => [ DB_SCALAR, undef, 1, undef ],
		maxgap => [ DB_SCALAR, undef, 1, undef ],
		annomodels => [ DB_SCALAR, undef, 1, undef ],
		nummodels => [ DB_SCALAR, undef, 1, undef ],
		maxrepair => [ DB_SCALAR, undef, 1, undef ],
		gapmodels => [ DB_SCALAR, undef, 1, undef ],
		id => [ DB_SCALAR, undef, 1, undef ],
		mingap => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "id" ],
		];
}

sub indices {
     return 
		[
		];
}

1;

package ModelSEED::GapfillingDB::GAPREPMDL;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		gapid => [ DB_SCALAR, undef, 1, undef ],
		repid => [ DB_SCALAR, undef, 1, undef ],
		model => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "gapid" ],
			[ "repid" ],
			[ "model" ],
		];
}

1;

package ModelSEED::GapfillingDB::GAPMDL;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		gapid => [ DB_SCALAR, undef, 1, undef ],
		model => [ DB_SCALAR, undef, 1, undef ],
		normnumrep => [ DB_SCALAR, undef, 1, undef ],
		numrep => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "gapid" ],
			[ "model" ],
		];
}

1;

package ModelSEED::GapfillingDB::CPD;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		maxgap => [ DB_SCALAR, undef, 1, undef ],
		nummodels => [ DB_SCALAR, undef, 1, undef ],
		gapmodels => [ DB_SCALAR, undef, 1, undef ],
		avegap => [ DB_SCALAR, undef, 1, undef ],
		mingap => [ DB_SCALAR, undef, 1, undef ],
		id => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "id" ],
		];
}

sub indices {
     return 
		[
		];
}

1;

package ModelSEED::GapfillingDB::CPDMDL;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		numgap => [ DB_SCALAR, undef, 1, undef ],
		normnumgap => [ DB_SCALAR, undef, 1, undef ],
		model => [ DB_SCALAR, undef, 1, undef ],
		cpdid => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "cpdid" ],
			[ "model" ],
		];
}

1;

package ModelSEED::GapfillingDB::CPDGAPMDL;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		gapid => [ DB_SCALAR, undef, 1, undef ],
		model => [ DB_SCALAR, undef, 1, undef ],
		cpdid => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "cpdid" ],
			[ "gapid" ],
			[ "model" ],
		];
}

1;

package ModelSEED::GapfillingDB::CPDGAP;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		gapid => [ DB_SCALAR, undef, 1, undef ],
		nummodel => [ DB_SCALAR, undef, 1, undef ],
		cpdid => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "cpdid" ],
			[ "gapid" ],
		];
}

1;
