use strict;
use warnings;
no warnings qw(redefine);

1;

# this class is AUTOGENERATED and will be AUTOMATICALLY REGENERATED
# all work done in this module will be LOST


package ModelSEED::ModelDB::COMPOUND_GROUPING;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		type => [ DB_SCALAR, undef, 1, undef ],
		grouping => [ DB_SCALAR, undef, 1, undef ],
		COMPOUND => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "COMPOUND", "grouping", "type" ],
		];
}

sub indices {
     return 
		[
		];
}

1;

package ModelSEED::ModelDB::SUBSYSTEM;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		classOne => [ DB_SCALAR, undef, 1, undef ],
		status => [ DB_SCALAR, undef, 1, undef ],
		name => [ DB_SCALAR, undef, 1, undef ],
		id => [ DB_SCALAR, undef, 1, undef ],
		classTwo => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "id" ],
			[ "name" ],
		];
}

sub indices {
     return 
		[
		];
}

1;

package ModelSEED::ModelDB::COMMENT;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		modificationDate => [ DB_SCALAR, undef, 1, undef ],
		objectID => [ DB_SCALAR, undef, 1, undef ],
		comment => [ DB_SCALAR, undef, 1, undef ],
		user => [ DB_SCALAR, undef, 1, undef ],
		name => [ DB_SCALAR, undef, 1, undef ],
		DBENTITY => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "objectID" ],
			[ "DBENTITY" ],
			[ "name" ],
			[ "user" ],
		];
}

1;

package ModelSEED::ModelDB::COMPOUND_BIOMASS;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		BIOMASS => [ DB_SCALAR, undef, 1, undef ],
		compartment => [ DB_SCALAR, undef, 1, undef ],
		category => [ DB_SCALAR, undef, 1, undef ],
		COMPOUND => [ DB_SCALAR, undef, 1, undef ],
		coefficient => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "COMPOUND", "BIOMASS", "compartment" ],
		];
}

sub indices {
     return 
		[
			[ "category" ],
		];
}

1;

package ModelSEED::ModelDB::MEDIA_COMPOUND;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		concentration => [ DB_SCALAR, undef, 1, undef ],
		entity => [ DB_SCALAR, undef, 1, undef ],
		maxFlux => [ DB_SCALAR, undef, 1, undef ],
		minFlux => [ DB_SCALAR, undef, 1, undef ],
		type => [ DB_SCALAR, undef, 1, undef ],
		MEDIA => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "MEDIA", "entity" ],
		];
}

sub indices {
     return 
		[
			[ "concentration" ],
			[ "maxFlux" ],
			[ "minFlux" ],
			[ "type" ],
		];
}

1;

package ModelSEED::ModelDB::DIAGRAM;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		name => [ DB_SCALAR, undef, 0, "NONE" ],
		type => [ DB_SCALAR, undef, 0, "SEED" ],
		id => [ DB_SCALAR, undef, 1, undef ],
		image => [ DB_SCALAR, undef, 0, "NONE" ],
		altid => [ DB_SCALAR, undef, 0, "NONE" ],
	};
}

sub unique_indices {
     return 
		[
			[ "id" ],
		];
}

sub indices {
     return 
		[
			[ "altid" ],
			[ "type" ],
			[ "name" ],
		];
}

1;

package ModelSEED::ModelDB::SUBSYSTEM_ROLE;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		SUBSYSTEM => [ DB_SCALAR, undef, 1, undef ],
		ROLE => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "ROLE", "SUBSYSTEM" ],
		];
}

sub indices {
     return 
		[
		];
}

1;

package ModelSEED::ModelDB::REACTION_GROUPING;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		REACTION => [ DB_SCALAR, undef, 1, undef ],
		type => [ DB_SCALAR, undef, 1, undef ],
		grouping => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "REACTION", "grouping", "type" ],
		];
}

sub indices {
     return 
		[
		];
}

1;

package ModelSEED::ModelDB::REACTION_COMPLEX;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		master => [ DB_SCALAR, undef, 1, undef ],
		REACTION => [ DB_SCALAR, undef, 1, undef ],
		COMPLEX => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "REACTION", "COMPLEX" ],
		];
}

sub indices {
     return 
		[
			[ "master" ],
		];
}

1;

package ModelSEED::ModelDB::MESSAGE;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		thread => [ DB_SCALAR, undef, 1, undef ],
		function => [ DB_SCALAR, undef, 1, undef ],
		time => [ DB_SCALAR, undef, 1, undef ],
		user => [ DB_SCALAR, undef, 1, undef ],
		id => [ DB_SCALAR, undef, 1, undef ],
		message => [ DB_SCALAR, undef, 1, undef ],
		package => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "function" ],
			[ "package" ],
			[ "user" ],
			[ "time" ],
			[ "id" ],
			[ "thread" ],
		];
}

1;

package ModelSEED::ModelDB::GENE_ESSENTIALITY;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		essentiality => [ DB_SCALAR, undef, 1, undef ],
		FEATURE => [ DB_SCALAR, undef, 1, undef ],
		ESSENTIALITYSET => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "ESSENTIALITYSET" ],
			[ "essentiality" ],
			[ "FEATURE" ],
		];
}

1;

package ModelSEED::ModelDB::COMPOUND;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		abstractCompound => [ DB_SCALAR, undef, 0, undef ],
		pKb => [ DB_SCALAR, undef, 0, undef ],
		deltaG => [ DB_SCALAR, undef, 0, undef ],
		structuralCues => [ DB_SCALAR, undef, 0, undef ],
		modificationDate => [ DB_SCALAR, undef, 1, undef ],
		pKa => [ DB_SCALAR, undef, 0, undef ],
		formula => [ DB_SCALAR, undef, 0, undef ],
		mass => [ DB_SCALAR, undef, 0, undef ],
		public => [ DB_SCALAR, undef, 0, "1" ],
		id => [ DB_SCALAR, undef, 1, undef ],
		scope => [ DB_SCALAR, undef, 0, "all" ],
		deltaGErr => [ DB_SCALAR, undef, 0, undef ],
		owner => [ DB_SCALAR, undef, 0, undef ],
		abbrev => [ DB_SCALAR, undef, 1, undef ],
		name => [ DB_SCALAR, undef, 1, undef ],
		charge => [ DB_SCALAR, undef, 0, undef ],
		creationDate => [ DB_SCALAR, undef, 1, undef ],
		stringcode => [ DB_SCALAR, undef, 0, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "id" ],
		];
}

sub indices {
     return 
		[
			[ "name" ],
			[ "public" ],
			[ "abbrev" ],
			[ "formula" ],
			[ "mass" ],
			[ "owner" ],
			[ "abstractCompound" ],
		];
}

1;

package ModelSEED::ModelDB::BIOMASS;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		cellWallCoef => [ DB_SCALAR, undef, 0, "NONE" ],
		cofactor => [ DB_SCALAR, undef, 1, undef ],
		energy => [ DB_SCALAR, undef, 1, undef ],
		cofactorCoef => [ DB_SCALAR, undef, 0, "NONE" ],
		RNACoef => [ DB_SCALAR, undef, 1, undef ],
		DNACoef => [ DB_SCALAR, undef, 1, undef ],
		equation => [ DB_SCALAR, undef, 1, undef ],
		modificationDate => [ DB_SCALAR, undef, 1, undef ],
		proteinCoef => [ DB_SCALAR, undef, 1, undef ],
		cellWall => [ DB_SCALAR, undef, 1, undef ],
		essentialRxn => [ DB_SCALAR, undef, 0, undef ],
		public => [ DB_SCALAR, undef, 0, "1" ],
		id => [ DB_SCALAR, undef, 1, undef ],
		lipidCoef => [ DB_SCALAR, undef, 0, "NONE" ],
		owner => [ DB_SCALAR, undef, 0, "master" ],
		name => [ DB_SCALAR, undef, 1, undef ],
		DNA => [ DB_SCALAR, undef, 1, undef ],
		lipidPackage => [ DB_SCALAR, undef, 0, "NONE" ],
		RNA => [ DB_SCALAR, undef, 1, undef ],
		unknownPackage => [ DB_SCALAR, undef, 0, "NONE" ],
		protein => [ DB_SCALAR, undef, 1, undef ],
		creationDate => [ DB_SCALAR, undef, 1, undef ],
		unknownCoef => [ DB_SCALAR, undef, 0, "NONE" ],
		cofactorPackage => [ DB_SCALAR, undef, 0, "NONE" ],
		lipid => [ DB_SCALAR, undef, 1, undef ],
		cellWallPackage => [ DB_SCALAR, undef, 0, "NONE" ],
	};
}

sub unique_indices {
     return 
		[
			[ "id" ],
		];
}

sub indices {
     return 
		[
			[ "name" ],
			[ "owner" ],
			[ "public" ],
			[ "cofactorPackage" ],
			[ "lipidPackage" ],
			[ "cellWallPackage" ],
			[ "unknownPackage" ],
		];
}

1;

package ModelSEED::ModelDB::REACTION_ALIAS;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		REACTION => [ DB_SCALAR, undef, 1, undef ],
		type => [ DB_SCALAR, undef, 1, undef ],
		alias => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "alias", "type", "REACTION" ],
		];
}

sub indices {
     return 
		[
		];
}

1;

package ModelSEED::ModelDB::REACTION_MODEL;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		directionality => [ DB_SCALAR, undef, 1, undef ],
		compartment => [ DB_SCALAR, undef, 1, undef ],
		reference => [ DB_SCALAR, undef, 0, "NONE" ],
		REACTION => [ DB_SCALAR, undef, 1, undef ],
		notes => [ DB_SCALAR, undef, 0, "NONE" ],
		MODEL => [ DB_SCALAR, undef, 1, undef ],
		pegs => [ DB_SCALAR, undef, 1, undef ],
		confidence => [ DB_SCALAR, undef, 0, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "REACTION", "MODEL", "compartment" ],
		];
}

sub indices {
     return 
		[
		];
}

1;

package ModelSEED::ModelDB::DBLINKS;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		refAttribute => [ DB_SCALAR, undef, 1, undef ],
		linkEntity => [ DB_SCALAR, undef, 1, undef ],
		refEntity => [ DB_SCALAR, undef, 1, undef ],
		linkAttribute => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "refEntity" ],
			[ "refAttribute" ],
			[ "linkEntity" ],
			[ "linkAttribute" ],
		];
}

1;

package ModelSEED::ModelDB::DIAGRAM_OBJECTS;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		DIAGRAM => [ DB_SCALAR, undef, 1, undef ],
		entity => [ DB_SCALAR, undef, 1, undef ],
		location => [ DB_SCALAR, undef, 0, "NONE" ],
		entitytype => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "entitytype" ],
			[ "DIAGRAM" ],
			[ "entity" ],
		];
}

1;

package ModelSEED::ModelDB::MODEL_HISTORY;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		TRANSACTION => [ DB_SCALAR, undef, 1, undef ],
		compartment => [ DB_SCALAR, undef, 1, undef ],
		directionality => [ DB_SCALAR, undef, 1, undef ],
		REACTION => [ DB_SCALAR, undef, 1, undef ],
		action => [ DB_SCALAR, undef, 1, undef ],
		pegs => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "TRANSACTION" ],
			[ "REACTION" ],
			[ "action" ],
		];
}

1;

package ModelSEED::ModelDB::PERMISSIONS;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		user => [ DB_SCALAR, undef, 1, undef ],
		permission => [ DB_SCALAR, undef, 1, undef ],
		type => [ DB_SCALAR, undef, 1, undef ],
		id => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "id", "user", "type" ],
		];
}

sub indices {
     return 
		[
			[ "id" ],
			[ "type" ],
			[ "user" ],
		];
}

1;

package ModelSEED::ModelDB::MODELVERSIONS;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		biomassReaction => [ DB_SCALAR, undef, 0, "NONE" ],
		source => [ DB_SCALAR, undef, 0, "unknown" ],
		noGrowthCompounds => [ DB_SCALAR, undef, 0, "NONE" ],
		status => [ DB_SCALAR, undef, 0, "-2" ],
		autocompleteDate => [ DB_SCALAR, undef, 0, "-1" ],
		builtDate => [ DB_SCALAR, undef, 0, "-1" ],
		spontaneousReactions => [ DB_SCALAR, undef, 0, "-1" ],
		gapFillReactions => [ DB_SCALAR, undef, 0, "-1" ],
		associatedGenes => [ DB_SCALAR, undef, 0, "-1" ],
		genome => [ DB_SCALAR, undef, 0, "unknown" ],
		reactions => [ DB_SCALAR, undef, 0, "-1" ],
		modificationDate => [ DB_SCALAR, undef, 0, "0" ],
		growth => [ DB_SCALAR, undef, 0, "0" ],
		public => [ DB_SCALAR, undef, 0, "0" ],
		id => [ DB_SCALAR, undef, 1, undef ],
		biologReactions => [ DB_SCALAR, undef, 0, "-1" ],
		autocompletionObjective => [ DB_SCALAR, undef, 0, "-1" ],
		owner => [ DB_SCALAR, undef, 0, "master" ],
		autoCompleteMedia => [ DB_SCALAR, undef, 0, "Complete" ],
		transporters => [ DB_SCALAR, undef, 0, "-1" ],
		cellwalltype => [ DB_SCALAR, undef, 0, "unknown" ],
		version => [ DB_SCALAR, undef, 0, "-1" ],
		name => [ DB_SCALAR, undef, 0, "unknown" ],
		autoCompleteReactions => [ DB_SCALAR, undef, 0, "-1" ],
		compounds => [ DB_SCALAR, undef, 0, "-1" ],
		canonicalID => [ DB_SCALAR, undef, 1, undef ],
		autoCompleteTime => [ DB_SCALAR, undef, 0, "-1" ],
		message => [ DB_SCALAR, undef, 0, "None" ],
		associatedSubsystemGenes => [ DB_SCALAR, undef, 0, "-1" ],
		autocompletionDualityGap => [ DB_SCALAR, undef, 0, "-1" ],
	};
}

sub unique_indices {
     return 
		[
			[ "id" ],
		];
}

sub indices {
     return 
		[
			[ "owner" ],
			[ "canonicalID" ],
			[ "version" ],
			[ "genome" ],
			[ "status" ],
			[ "autoCompleteMedia" ],
			[ "biomassReaction" ],
			[ "source" ],
			[ "cellwalltype" ],
			[ "name" ],
		];
}

1;

package ModelSEED::ModelDB::MODEL_HISTORY_TRANSACTION;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		modificationDate => [ DB_SCALAR, undef, 1, undef ],
		version => [ DB_SCALAR, undef, 1, undef ],
		MODEL => [ DB_SCALAR, undef, 1, undef ],
		user => [ DB_SCALAR, undef, 1, undef ],
		cause => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "cause" ],
			[ "user" ],
			[ "modificationDate" ],
			[ "version" ],
		];
}

1;

package ModelSEED::ModelDB::BIOLOG_SIGNALS;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		plateLocation => [ DB_SCALAR, undef, 1, undef ],
		EXPERIMENT => [ DB_SCALAR, undef, 1, undef ],
		rootMedia => [ DB_SCALAR, undef, 1, undef ],
		aliases => [ DB_SCALAR, undef, 1, undef ],
		signals => [ DB_SCALAR, undef, 1, undef ],
		COMPOUND => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "plateLocation" ],
			[ "COMPOUND" ],
			[ "rootMedia" ],
			[ "EXPERIMENT" ],
		];
}

1;

package ModelSEED::ModelDB::MODEL_FVA;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		variableBounds => [ DB_SCALAR, undef, 0, undef ],
		posvarBounds => [ DB_SCALAR, undef, 0, undef ],
		variable => [ DB_SCALAR, undef, 0, undef ],
		positiveBounds => [ DB_SCALAR, undef, 0, undef ],
		inactive => [ DB_SCALAR, undef, 0, undef ],
		MEDIA => [ DB_SCALAR, undef, 1, undef ],
		parameters => [ DB_SCALAR, undef, 1, undef ],
		posvar => [ DB_SCALAR, undef, 0, undef ],
		dead => [ DB_SCALAR, undef, 0, undef ],
		negvar => [ DB_SCALAR, undef, 0, undef ],
		negvarBounds => [ DB_SCALAR, undef, 0, undef ],
		MODEL => [ DB_SCALAR, undef, 1, undef ],
		positive => [ DB_SCALAR, undef, 0, undef ],
		negative => [ DB_SCALAR, undef, 0, undef ],
		negativeBounds => [ DB_SCALAR, undef, 0, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "MEDIA" ],
			[ "MODEL" ],
			[ "parameters" ],
		];
}

1;

package ModelSEED::ModelDB::ROLE;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		exemplarid => [ DB_SCALAR, undef, 0, "NONE" ],
		exemplarmd5 => [ DB_SCALAR, undef, 0, "NONE" ],
		name => [ DB_SCALAR, undef, 1, undef ],
		searchname => [ DB_SCALAR, undef, 1, undef ],
		id => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "id" ],
			[ "name" ],
			[ "searchname" ],
		];
}

sub indices {
     return 
		[
			[ "exemplarid" ],
			[ "exemplarmd5" ],
		];
}

1;

package ModelSEED::ModelDB::FBA_RESULTS;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		owner => [ DB_SCALAR, undef, 1, undef ],
		time => [ DB_SCALAR, undef, 0, "0" ],
		model => [ DB_SCALAR, undef, 1, undef ],
		flux => [ DB_SCALAR, undef, 1, undef ],
		drainFlux => [ DB_SCALAR, undef, 1, undef ],
		pegKO => [ DB_SCALAR, undef, 0, "none" ],
		growth => [ DB_SCALAR, undef, 1, undef ],
		media => [ DB_SCALAR, undef, 1, undef ],
		rxnKO => [ DB_SCALAR, undef, 0, "none" ],
		method => [ DB_SCALAR, undef, 1, undef ],
		results => [ DB_SCALAR, undef, 0, "none" ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "owner" ],
			[ "model" ],
			[ "media" ],
			[ "method" ],
		];
}

1;

package ModelSEED::ModelDB::COMPOUND_ALIAS;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		type => [ DB_SCALAR, undef, 1, undef ],
		alias => [ DB_SCALAR, undef, 1, undef ],
		COMPOUND => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "alias", "type", "COMPOUND" ],
		];
}

sub indices {
     return 
		[
		];
}

1;

package ModelSEED::ModelDB::COMPLEX_ROLE;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		type => [ DB_SCALAR, undef, 0, undef ],
		COMPLEX => [ DB_SCALAR, undef, 0, "-1" ],
		ROLE => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "ROLE", "COMPLEX" ],
		];
}

sub indices {
     return 
		[
			[ "type" ],
		];
}

1;

package ModelSEED::ModelDB::COMPARTMENTS;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		name => [ DB_SCALAR, undef, 1, undef ],
		outside => [ DB_SCALAR, undef, 0, "e" ],
		id => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "id" ],
			[ "name" ],
		];
}

sub indices {
     return 
		[
		];
}

1;

package ModelSEED::ModelDB::HISTORY;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		modificationDate => [ DB_SCALAR, undef, 1, undef ],
		newValue => [ DB_SCALAR, undef, 1, undef ],
		oldValue => [ DB_SCALAR, undef, 1, undef ],
		objectID => [ DB_SCALAR, undef, 1, undef ],
		explanation => [ DB_SCALAR, undef, 1, undef ],
		user => [ DB_SCALAR, undef, 1, undef ],
		DBENTITY => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "DBENTITY" ],
			[ "objectID" ],
			[ "user" ],
			[ "modificationDate" ],
		];
}

1;

package ModelSEED::ModelDB::MEDIA;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		modificationDate => [ DB_SCALAR, undef, 1, undef ],
		owner => [ DB_SCALAR, undef, 1, undef ],
		aerobic => [ DB_SCALAR, undef, 0, undef ],
		creationDate => [ DB_SCALAR, undef, 1, undef ],
		public => [ DB_SCALAR, undef, 1, undef ],
		aliases => [ DB_SCALAR, undef, 0, undef ],
		id => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "id" ],
		];
}

sub indices {
     return 
		[
			[ "owner" ],
			[ "public" ],
		];
}

1;

package ModelSEED::ModelDB::MODEL_ESSENTIALITY;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		essentials => [ DB_SCALAR, undef, 0, undef ],
		parameters => [ DB_SCALAR, undef, 1, undef ],
		MODEL => [ DB_SCALAR, undef, 1, undef ],
		MEDIA => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "MEDIA" ],
			[ "MODEL" ],
			[ "parameters" ],
		];
}

1;

package ModelSEED::ModelDB::DBENTITY;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		attribute => [ DB_SCALAR, undef, 1, undef ],
		idAttribute => [ DB_SCALAR, undef, 1, undef ],
		objectType => [ DB_SCALAR, undef, 1, undef ],
		id => [ DB_SCALAR, undef, 0, "-1" ],
	};
}

sub unique_indices {
     return 
		[
			[ "id" ],
		];
}

sub indices {
     return 
		[
			[ "attribute" ],
			[ "objectType" ],
			[ "idAttribute" ],
		];
}

1;

package ModelSEED::ModelDB::EXPERIMENT;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		authors => [ DB_SCALAR, undef, 1, undef ],
		owner => [ DB_SCALAR, undef, 1, undef ],
		mutations => [ DB_SCALAR, undef, 1, undef ],
		GENOME => [ DB_SCALAR, undef, 1, undef ],
		public => [ DB_SCALAR, undef, 1, undef ],
		name => [ DB_SCALAR, undef, 1, undef ],
		type => [ DB_SCALAR, undef, 1, undef ],
		id => [ DB_SCALAR, undef, 1, undef ],
		description => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "id" ],
		];
}

sub indices {
     return 
		[
			[ "GENOME" ],
			[ "type" ],
			[ "public" ],
			[ "owner" ],
		];
}

1;

package ModelSEED::ModelDB::REACTION;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		deltaG => [ DB_SCALAR, undef, 0, undef ],
		status => [ DB_SCALAR, undef, 0, undef ],
		thermoReversibility => [ DB_SCALAR, undef, 0, undef ],
		equation => [ DB_SCALAR, undef, 1, undef ],
		enzyme => [ DB_SCALAR, undef, 0, undef ],
		structuralCues => [ DB_SCALAR, undef, 0, undef ],
		definition => [ DB_SCALAR, undef, 1, undef ],
		transportedAtoms => [ DB_SCALAR, undef, 0, undef ],
		modificationDate => [ DB_SCALAR, undef, 1, undef ],
		reversibility => [ DB_SCALAR, undef, 0, undef ],
		public => [ DB_SCALAR, undef, 0, "1" ],
		id => [ DB_SCALAR, undef, 1, undef ],
		abstractReaction => [ DB_SCALAR, undef, 0, undef ],
		scope => [ DB_SCALAR, undef, 0, "all" ],
		code => [ DB_SCALAR, undef, 1, undef ],
		deltaGErr => [ DB_SCALAR, undef, 0, undef ],
		owner => [ DB_SCALAR, undef, 0, undef ],
		abbrev => [ DB_SCALAR, undef, 1, undef ],
		name => [ DB_SCALAR, undef, 1, undef ],
		creationDate => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "id" ],
		];
}

sub indices {
     return 
		[
			[ "abbrev" ],
			[ "public" ],
			[ "owner" ],
			[ "status" ],
			[ "abstractReaction" ],
		];
}

1;

package ModelSEED::ModelDB::MODEL;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		biomassReaction => [ DB_SCALAR, undef, 0, "NONE" ],
		source => [ DB_SCALAR, undef, 0, "unknown" ],
		noGrowthCompounds => [ DB_SCALAR, undef, 0, "NONE" ],
		status => [ DB_SCALAR, undef, 0, "-2" ],
		autocompleteDate => [ DB_SCALAR, undef, 0, "-1" ],
		builtDate => [ DB_SCALAR, undef, 0, "-1" ],
		spontaneousReactions => [ DB_SCALAR, undef, 0, "-1" ],
		gapFillReactions => [ DB_SCALAR, undef, 0, "-1" ],
		associatedGenes => [ DB_SCALAR, undef, 0, "-1" ],
		genome => [ DB_SCALAR, undef, 0, "unknown" ],
		reactions => [ DB_SCALAR, undef, 0, "-1" ],
		modificationDate => [ DB_SCALAR, undef, 0, "0" ],
		growth => [ DB_SCALAR, undef, 0, "0" ],
		public => [ DB_SCALAR, undef, 0, "0" ],
		id => [ DB_SCALAR, undef, 1, undef ],
		biologReactions => [ DB_SCALAR, undef, 0, "-1" ],
		autocompletionObjective => [ DB_SCALAR, undef, 0, "-1" ],
		owner => [ DB_SCALAR, undef, 0, "master" ],
		autoCompleteMedia => [ DB_SCALAR, undef, 0, "Complete" ],
		transporters => [ DB_SCALAR, undef, 0, "-1" ],
		cellwalltype => [ DB_SCALAR, undef, 0, "unknown" ],
		version => [ DB_SCALAR, undef, 0, "-1" ],
		name => [ DB_SCALAR, undef, 0, "unknown" ],
		autoCompleteReactions => [ DB_SCALAR, undef, 0, "-1" ],
		compounds => [ DB_SCALAR, undef, 0, "-1" ],
		autoCompleteTime => [ DB_SCALAR, undef, 0, "-1" ],
		message => [ DB_SCALAR, undef, 0, "None" ],
		associatedSubsystemGenes => [ DB_SCALAR, undef, 0, "-1" ],
		autocompletionDualityGap => [ DB_SCALAR, undef, 0, "-1" ],
		defaultStudyMedia => [ DB_SCALAR, undef, 0, "Complete" ],
	};
}

sub unique_indices {
     return 
		[
			[ "id" ],
		];
}

sub indices {
     return 
		[
			[ "owner" ],
			[ "version" ],
			[ "genome" ],
			[ "status" ],
			[ "autoCompleteMedia" ],
			[ "biomassReaction" ],
			[ "source" ],
			[ "cellwalltype" ],
			[ "name" ],
		];
}

1;

package ModelSEED::ModelDB::OUTPUTID;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		folderExists => [ DB_SCALAR, undef, 0, "0" ],
		function => [ DB_SCALAR, undef, 0, "UNKNOWN" ],
		creationDate => [ DB_SCALAR, undef, 0, "0" ],
		finishedDate => [ DB_SCALAR, undef, 0, "0" ],
		user => [ DB_SCALAR, undef, 0, "UNKNOWN" ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
		];
}

1;

package ModelSEED::ModelDB::COMPOUND_REACTION;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		cofactor => [ DB_SCALAR, undef, 0, "false" ],
		compartment => [ DB_SCALAR, undef, 1, undef ],
		REACTION => [ DB_SCALAR, undef, 1, undef ],
		COMPOUND => [ DB_SCALAR, undef, 1, undef ],
		coefficient => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "COMPOUND", "REACTION", "compartment" ],
		];
}

sub indices {
     return 
		[
		];
}

1;

package ModelSEED::ModelDB::CURRENTID;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		object => [ DB_SCALAR, undef, 1, undef ],
		id => [ DB_SCALAR, undef, 1, undef ],
		prefix => [ DB_SCALAR, undef, 1, undef ],
		digits => [ DB_SCALAR, undef, 0, "5" ],
	};
}

sub unique_indices {
     return 
		[
			[ "object" ],
		];
}

sub indices {
     return 
		[
		];
}

1;

package ModelSEED::ModelDB::GENOMESTATS;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		genesInSubsystems => [ DB_SCALAR, undef, 0, "0" ],
		owner => [ DB_SCALAR, undef, 0, "unknown" ],
		source => [ DB_SCALAR, undef, 0, "unknown" ],
		genes => [ DB_SCALAR, undef, 0, "0" ],
		GENOME => [ DB_SCALAR, undef, 1, undef ],
		name => [ DB_SCALAR, undef, 0, "unknown" ],
		taxonomy => [ DB_SCALAR, undef, 0, "unknown" ],
		gramNegGenes => [ DB_SCALAR, undef, 0, "0" ],
		size => [ DB_SCALAR, undef, 0, "0" ],
		gramPosGenes => [ DB_SCALAR, undef, 0, "0" ],
		gcContent => [ DB_SCALAR, undef, 0, "0.5" ],
		public => [ DB_SCALAR, undef, 0, "0" ],
		genesWithFunctions => [ DB_SCALAR, undef, 0, "0" ],
		class => [ DB_SCALAR, undef, 0, "unknown" ],
	};
}

sub unique_indices {
     return 
		[
			[ "GENOME" ],
		];
}

sub indices {
     return 
		[
			[ "name" ],
			[ "taxonomy" ],
			[ "source" ],
			[ "owner" ],
			[ "class" ],
			[ "source" ],
			[ "public" ],
		];
}

1;

package ModelSEED::ModelDB::REFERENCE;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		objectID => [ DB_SCALAR, undef, 1, undef ],
		date => [ DB_SCALAR, undef, 1, undef ],
		pubmedID => [ DB_SCALAR, undef, 1, undef ],
		notation => [ DB_SCALAR, undef, 1, undef ],
		DBENTITY => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
			[ "objectID" ],
			[ "DBENTITY" ],
			[ "pubmedID" ],
		];
}

1;

package ModelSEED::ModelDB::COMPLEX;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		id => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "id" ],
		];
}

sub indices {
     return 
		[
		];
}

1;

package ModelSEED::ModelDB::ESSENTIALITYSET;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		reference => [ DB_SCALAR, undef, 1, undef ],
		GENOME => [ DB_SCALAR, undef, 1, undef ],
		MEDIA => [ DB_SCALAR, undef, 1, undef ],
		id => [ DB_SCALAR, undef, 0, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "id" ],
		];
}

sub indices {
     return 
		[
			[ "reference" ],
			[ "GENOME" ],
			[ "MEDIA" ],
		];
}

1;
